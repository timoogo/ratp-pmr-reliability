// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EquipmentType {
  ASCENSEUR
  ESCALATOR
  PORTILLONS
  CABINES
}

enum EquipmentStatus {
  DISPONIBLE
  INDISPONIBLE
  EN_MAINTENANCE
}

enum IncidentStatus {
  NOUVEAU
  EN_COURS
  RESOLU
  REJETE
}

enum SubscriptionFrequency {
  IMMEDIATE
  DAILY
  WEEKLY
}

model Station {
  id         String      @id @default(cuid())
  name       String
  code       String      @unique
  slug       String      @unique
  line       String
  family     String
  equipments Equipment[] // 1 station -> N équipements
  stationOrder      Int         @unique @map("order")

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Equipment {
  id              String             @id @default(cuid())
  name            String
  type            EquipmentType
  status          EquipmentStatus
  code            String             @unique
  stationId       String
  situation       String             // ex : "Mezzanine vers Quai 1"
  direction       String             // ex : "Olympiades"
  station         Station            @relation(fields: [stationId], references: [id])
  histories       EquipmentHistory[]
  checks          EquipmentCheck[]
  repairs         EquipmentRepair[]
  incidents       IncidentReport[]    @relation("EquipmentIncidents")
  displayHistory  Json               @default("{}")
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model EquipmentHistory {
  id              String     @id @default(cuid())
  equipmentId     String
  equipment       Equipment  @relation(fields: [equipmentId], references: [id])
  date            DateTime   // date de l’événement
  status          String     // "ok", "ko", etc.
  comment         String?
  createdAt       DateTime   @default(now())
  pending         Boolean    @default(true)
}

model EquipmentCheck {
  id              String     @id @default(cuid())
  equipmentId     String
  equipment       Equipment  @relation(fields: [equipmentId], references: [id])
  checkedAt       DateTime   // date de vérification
  agent           String     // nom ou identifiant de l’agent
  comment         String?
  createdAt       DateTime   @default(now())
}

model EquipmentRepair {
  id              String     @id @default(cuid())
  equipmentId     String
  equipment       Equipment  @relation(fields: [equipmentId], references: [id])
  repairedAt      DateTime   // date de réparation effective
  comment         String?
  createdAt       DateTime   @default(now())
}



model IncidentReport {
  id          String         @id @default(cuid())
  description String
  ip          String
  userAgent   String
  status      IncidentStatus @default(NOUVEAU)

  equipment   Equipment      @relation("EquipmentIncidents", fields: [equipmentId], references: [id])
  equipmentId String

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model PushSubscription {
  id         Int      @id @default(autoincrement())
  endpoint   String
  keys       Json
  station    String
  frequency  String
  types      String[]

  @@unique([endpoint, station])
}
