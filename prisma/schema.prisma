// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EquipmentType {
  ASCENSEUR
  ESCALATOR
  PORTILLONS
  CABINES
}

model Station {
  id         String      @id @default(cuid())
  name       String
  code       String      @unique
  slug       String      @unique
  line       String
  family     String
  equipments Equipment[] // 1 station -> N équipements
  stationOrder      Int         @unique @map("order")

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Equipment {
  id              String             @id @default(cuid())
  name            String
  type            EquipmentType
  status          String
  code            String             @unique
  stationId       String
  station         Station            @relation(fields: [stationId], references: [id])
  histories       EquipmentHistory[]
  checks          EquipmentCheck[]
  repairs         EquipmentRepair[]
  displayHistory  Json               @default("{}") // <- ✅ AJOUTÉ ICI
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model EquipmentHistory {
  id              String     @id @default(cuid())
  equipmentId     String
  equipment       Equipment  @relation(fields: [equipmentId], references: [id])
  date            DateTime   // date de l’événement
  status          String     // "ok", "ko", etc.
  comment         String?
  createdAt       DateTime   @default(now())
}

model EquipmentCheck {
  id              String     @id @default(cuid())
  equipmentId     String
  equipment       Equipment  @relation(fields: [equipmentId], references: [id])
  checkedAt       DateTime   // date de vérification
  agent           String     // nom ou identifiant de l’agent
  comment         String?
  createdAt       DateTime   @default(now())
}

model EquipmentRepair {
  id              String     @id @default(cuid())
  equipmentId     String
  equipment       Equipment  @relation(fields: [equipmentId], references: [id])
  repairedAt      DateTime   // date de réparation effective
  comment         String?
  createdAt       DateTime   @default(now())
}